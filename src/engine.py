from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.config import config
from src.logger import logger


async def update_main_message(update: Update, context: ContextTypes.DEFAULT_TYPE, status_text: str, is_logged_in: bool = False):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    is_admin = (user_id == config.ADMIN_TELEGRAM_ID)
    menu_markup = get_main_menu(is_logged_in, is_admin)

    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ message_id –∏–∑ context.user_data –∏–ª–∏ update
    chat_id = context.user_data.get('main_menu_chat_id') or update.effective_chat.id
    message_id = context.user_data.get('main_menu_message_id')

    # –ï—Å–ª–∏ message_id –∏–∑–≤–µ—Å—Ç–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=status_text,
                reply_markup=menu_markup,
                parse_mode='Markdown'
            )
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.")
            return # –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º
        except Exception as e:
            error_message = str(e).lower()
            if "message to edit not found" in error_message or "message_id_invalid" in error_message or "message not found" in error_message:
                logger.warning(f"–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
                # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ
                context.user_data.pop('main_menu_message_id', None)
                context.user_data.pop('main_menu_chat_id', None)
                message_id = None # –°–±—Ä–æ—Å–∏–º message_id, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
                # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ message_id –±—ã–ª
                return

    # –ï—Å–ª–∏ message_id –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    # –≠—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        sent_message = await context.bot.send_message(
            chat_id=chat_id,
            text=status_text,
            reply_markup=menu_markup,
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['main_menu_message_id'] = sent_message.message_id
        context.user_data['main_menu_chat_id'] = sent_message.chat_id
        logger.info(f"–ù–æ–≤–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_message.message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {sent_message.chat_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ------

def get_main_menu(is_logged_in: bool = False, is_admin: bool = False):
    keyboard = []
    if not is_logged_in:
        keyboard.append([InlineKeyboardButton("üîë –í–æ–π—Ç–∏", callback_data='login')])
        keyboard.append([InlineKeyboardButton("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')])
    else:
        keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data='restart')])
        keyboard.append([InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='logout')])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')])

    return InlineKeyboardMarkup(keyboard)

#-----
def get_settings_menu():
    keyboard = [
        [InlineKeyboardButton(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏: {config.SESSION_TIMEOUT} —Å–µ–∫", callback_data='dummy_info')], # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–∞—É—Ç", callback_data='change_timeout')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')],
    ]
    return InlineKeyboardMarkup(keyboard)