import time
from telegram import Update
from telegram.ext import ContextTypes
from src.config import config
from src.db.utils import create_session, delete_session, get_session, cleanup_expired_sessions
from src.engine import get_settings_menu, update_main_message
from src.logger import logger


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    is_admin = (user_id == config.ADMIN_TELEGRAM_ID)
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
    cleanup_expired_sessions()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_user_id, timestamp = get_session(user_id)
    is_logged_in = bot_user_id is not None and (time.time() - timestamp) < config.SESSION_TIMEOUT

    if data == 'register':
        status_text = (
            "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`/register <–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`\n\n"
            "*–í–∞–∂–Ω–æ:* –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ *—ç—Ç–æ—Ç –±–æ—Ç* –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–µ–π —É—á–µ—Ç–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
        )
        await update_main_message(update, context, status_text, is_logged_in=False) # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–Ω–æ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω

    elif data == 'login':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω (–ø–æ —Å–µ—Å—Å–∏–∏)
        if is_logged_in:
             # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
             create_session(user_id, bot_user_id)
             status_text = "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
             await update_main_message(update, context, status_text, is_logged_in=True)
        else:
            status_text = (
                "üîë *–í—Ö–æ–¥*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`/login <–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`"
            )
            await update_main_message(update, context, status_text, is_logged_in=False)

    elif data == 'restart':
        if not is_logged_in:
            status_text = "‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
            await update_main_message(update, context, status_text, is_logged_in=False)
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        create_session(user_id, bot_user_id)
        status_text = (
            "üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:\n"
            "`/restart <–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è_–Ω–∞_—Å–µ—Ä–≤–µ—Ä–µ>`"
        )
        await update_main_message(update, context, status_text, is_logged_in=True)

    elif data == 'logout':
        delete_session(user_id)
        status_text = "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        await update_main_message(update, context, status_text, is_logged_in=False) # –ù–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω

    elif data == 'settings':
        if not is_admin:
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", show_alert=True)
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            # await update_main_message(update, context, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", is_logged_in=is_logged_in)
            return
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
        # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ message_id –∏–∑ context.user_data –∏–ª–∏ update
        chat_id = context.user_data.get('main_menu_chat_id') or update.effective_chat.id
        message_id = context.user_data.get('main_menu_message_id') or query.message.message_id

        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=settings_text,
                parse_mode='Markdown',
                reply_markup=get_settings_menu()
            )
        except Exception as e:
             logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
             # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
             try:
                 sent_message = await context.bot.send_message(
                     chat_id=chat_id,
                     text=settings_text,
                     reply_markup=get_settings_menu(),
                     parse_mode='Markdown'
                 )
                 context.user_data['main_menu_message_id'] = sent_message.message_id
                 context.user_data['main_menu_chat_id'] = sent_message.chat_id
             except Exception as e2:
                 logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e2}")