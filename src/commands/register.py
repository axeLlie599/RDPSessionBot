from src.config import config
from src.db.expressions import DatabaseExpressions
from src.db.utils import get_db_connection, register_bot_user
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.engine import update_main_message
from src.logger import logger


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute(DatabaseExpressions.GET_USER_STATUS, (user_id,))
        existing_user = cursor.fetchone()

    if existing_user:
        status = existing_user[0]
        if status == 'active':
            status_text = "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–¥–æ–±—Ä–µ–Ω—ã."
        elif status == 'pending':
            status_text = "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        else: # banned
             status_text = "‚ÑπÔ∏è –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞."
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /register –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /register {message_id}: {e}")
        await update_main_message(update, context, status_text, is_logged_in=False) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–Ω –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        return

    if len(context.args) < 2:
        status_text = (
            "üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/register <–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`\n\n"
            "*–í–∞–∂–Ω–æ:* –≠—Ç–æ—Ç –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ *—ç—Ç–æ—Ç –±–æ—Ç* –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–µ–π —É—á–µ—Ç–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
        )
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /register –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /register {message_id}: {e}")
        await update_main_message(update, context, status_text, is_logged_in=False)
        return

    username = context.args[0].strip()
    password = context.args[1]

    if register_bot_user(user_id, username, password):
        status_text = "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∫ –∏ –±—ã–ª–æ)
        approve_button = InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{user_id}')
        keyboard = [[approve_button]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await context.bot.send_message(
                chat_id=config.ADMIN_TELEGRAM_ID,
                text=f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\nTelegram User ID: `{user_id}`\n–ò–º—è: {update.effective_user.full_name or 'N/A'}\nUsername: @{update.effective_user.username or 'N/A'}\n–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ª–æ–≥–∏–Ω: `{username}`",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–≤–Ω—É—Ç—Ä. –ª–æ–≥–∏–Ω: {username})")
    else:
        status_text = "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç."

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /register –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /register {message_id}: {e}")

    await update_main_message(update, context, status_text, is_logged_in=False)