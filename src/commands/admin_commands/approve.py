import time

from telegram import Update
from telegram.ext import ContextTypes

from src.config import config
from src.db.utils import get_session, get_db_connection, approve_user
from src.engine import update_main_message, get_main_menu
from src.logger import logger


async def approve_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /approve <user_id> –æ—Ç –∞–¥–º–∏–Ω–∞."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id

    if user_id != config.ADMIN_TELEGRAM_ID:
        status_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot_user_id, timestamp = get_session(user_id)
        is_logged_in = bot_user_id is not None and (time.time() - timestamp) < config.SESSION_TIMEOUT
        is_admin_user = (user_id == config.ADMIN_TELEGRAM_ID)
        await update_main_message(update, context, status_text, is_logged_in)
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /approve –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /approve {message_id}: {e}")
        return

    if not context.args or not context.args[0].isdigit():
        status_text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/approve <telegram_user_id>`"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot_user_id, timestamp = get_session(user_id)
        is_logged_in = bot_user_id is not None and (time.time() - timestamp) < config.SESSION_TIMEOUT
        is_admin_user = (user_id == config.ADMIN_TELEGRAM_ID)
        await update_main_message(update, context, status_text, is_logged_in)
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /approve –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /approve {message_id}: {e}")
        return

    target_telegram_id = int(context.args[0])
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT status FROM bot_users WHERE telegram_id = ?", (target_telegram_id,))
        row = cursor.fetchone()

    if not row:
        status_text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—è–≤–∫–∞—Ö."
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        bot_user_id, timestamp = get_session(user_id)
        is_logged_in = bot_user_id is not None and (time.time() - timestamp) < config.SESSION_TIMEOUT
        is_admin_user = (user_id == config.ADMIN_TELEGRAM_ID)
        await update_main_message(update, context, status_text, is_logged_in)
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /approve –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /approve {message_id}: {e}")
        return

    current_status = row[0]
    if current_status == 'active':
        status_text = f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_telegram_id} —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω."
    elif current_status in ['pending', 'banned']:
        approve_user(target_telegram_id)
        status_text = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_telegram_id} –æ–¥–æ–±—Ä–µ–Ω."
        try:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ (–æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
            await context.bot.send_message(
                chat_id=target_telegram_id,
                text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –±–æ—Ç–∞.",
                reply_markup=get_main_menu(is_logged_in=False) # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_telegram_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {e}")
    else:
        status_text = f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {current_status}."

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /approve –æ—Ç –∞–¥–º–∏–Ω–∞ {user_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /approve {message_id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    bot_user_id, timestamp = get_session(user_id)
    is_logged_in_admin = bot_user_id is not None and (time.time() - timestamp) < config.SESSION_TIMEOUT
    is_admin_user = (user_id == config.ADMIN_TELEGRAM_ID)
    await update_main_message(update, context, status_text, is_logged_in_admin)