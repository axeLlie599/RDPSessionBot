import time

from src.config import config
from src.db.utils import cleanup_expired_sessions, get_session, create_session, authenticate_user
from src.engine import update_main_message
from telegram import Update
from telegram.ext import ContextTypes

from src.logger import logger


async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
    cleanup_expired_sessions()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω (–ø–æ —Å–µ—Å—Å–∏–∏)
    bot_user_id, timestamp = get_session(user_id)
    is_logged_in = bot_user_id is not None and (time.time() - timestamp) < config.SESSION_TIMEOUT
    if is_logged_in:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        create_session(user_id, bot_user_id)
        status_text = "‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /login –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /login {message_id}: {e}")
        await update_main_message(update, context, status_text, is_logged_in=True)
        return

    if len(context.args) < 2:
        status_text = (
            "üîë *–í—Ö–æ–¥*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/login <–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å>`"
        )
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
             await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
             logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /login –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /login {message_id}: {e}")
        await update_main_message(update, context, status_text, is_logged_in=False)
        return

    username = context.args[0].strip()
    password = context.args[1]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    authenticated_telegram_id, authenticated_bot_user_id = authenticate_user(username, password)
    if authenticated_telegram_id is not None and authenticated_telegram_id == user_id:
        # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram ID
        create_session(user_id, authenticated_bot_user_id) # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        status_text = f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ `{username}`."
        is_logged_in = True
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à—ë–ª –∫–∞–∫ {username}")
    elif authenticated_telegram_id is not None and authenticated_telegram_id != user_id:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å, –Ω–æ –¥—Ä—É–≥–æ–π Telegram ID
        status_text = "‚ùå –≠—Ç–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram."
        is_logged_in = False
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–¥ —á—É–∂–æ–π —É—á–µ—Ç–∫–æ–π: Telegram ID {user_id} –ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –∫–∞–∫ {username} (–≤–ª–∞–¥–µ–ª–µ—Ü: {authenticated_telegram_id})")
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å
        status_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å."
        is_logged_in = False
        logger.warning(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –ª–æ–≥–∏–Ω–æ–º {username}")

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ /login –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ /login {message_id}: {e}")

    await update_main_message(update, context, status_text, is_logged_in)